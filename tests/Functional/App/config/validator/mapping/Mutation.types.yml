Mutation:
    type: object
    config:
        fields:
            simpleValidation:
                type: Boolean
                resolve: "@=mut('mutation_mock', [args, validator])"
                args:
                    username:
                        type: String!
                        validation:
                            - Length: { min: 5 }

            linkedConstraintsValidation:
                type: Boolean
                resolve: "@=mut('mutation_mock', [args, validator])"
                validation:
                    link: Overblog\GraphQLBundle\Tests\Functional\Validator\DummyEntity
                    constraints:
                        - Expression: "this.string2 == 'Dolor Sit Amet'"
                args:
                    string1:
                        type: String!
                        validation: Overblog\GraphQLBundle\Tests\Functional\Validator\DummyEntity::$string1
                    string2:
                        type: String!
                        validation: Overblog\GraphQLBundle\Tests\Functional\Validator\DummyEntity::string2()
                    string3:
                        type: String!
                        validation: Overblog\GraphQLBundle\Tests\Functional\Validator\DummyEntity::string3

            collectionValidation:
                type: Boolean
                resolve: "@=mut('mutation_mock', [args, validator])"
                args:
                    emails:
                        type: '[String]!'
                        validation:
                            - Unique: ~
                            - Count: { min: 3 }
                            - All:
                                - Email:
                                    message: 'The email "{{ value }}" is not a valid email.'

            cascadeValidationWithGroups:
                type: Boolean
                resolve: '@=mut("mutation_mock", [args, validator])'
                args:
                    groups:
                        type: "[String]!"
                    address:
                        type: Address!
                        validation: cascade
                    birthdate:
                        type: Birthdate
                        validation:
                            cascade:
                                groups: ['group2']
